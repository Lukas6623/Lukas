import json
import os
from telethon import TelegramClient, events
from telethon.tl.custom import Button

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CONFIG_FILE = "config.json"
LANG_FILE = "modules/language.txt"
LANG_DIR = "languages"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —è–∑—ã–∫–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    with open(CONFIG_FILE, "r", encoding="utf-8") as file:
        return json.load(file)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ —Ñ–∞–π–ª
def save_language(lang_code):
    with open(LANG_FILE, "w", encoding="utf-8") as file:
        file.write(lang_code)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
def load_language():
    if os.path.exists(LANG_FILE):
        with open(LANG_FILE, "r", encoding="utf-8") as file:
            lang = file.read().strip()
            return lang if os.path.exists(os.path.join(LANG_DIR, f"{lang}.py")) else "en"
    return "en"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_translations(lang_code):
    lang_file = os.path.join(LANG_DIR, f"{lang_code}.py")
    if os.path.exists(lang_file):
        lang_module = {}
        with open(lang_file, "r", encoding="utf-8") as file:
            exec(file.read(), lang_module)
        return lang_module.get("LANG", {})
    return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()
API_ID = config["api_id"]
API_HASH = config["api_hash"]
API_TOKEN = config["token"]

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
bot = TelegramClient('bot', api_id=API_ID, api_hash=API_HASH).start(bot_token=API_TOKEN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.on(events.NewMessage(pattern='/start'))
async def start(event):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
    current_lang = load_language()
    translations = load_translations(current_lang)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    buttons = [
        [Button.inline(translations.get("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"), b'settings')],
        [Button.inline(translations.get("choose_language", "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ üåç"), b'choose_language')],
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await event.reply(translations.get("choose_language_message", "üåç Choose a language:"), buttons=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.on(events.CallbackQuery)
async def callback(event):
    lang_code = event.data.decode()  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    if lang_code == "settings":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        current_lang = load_language()
        translations = load_translations(current_lang)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª–µ–π
        settings_buttons = [
            [Button.inline(translations.get("all_modules", "–í—Å–µ –º–æ–¥—É–ª–∏ üì¶"), b'all_modules')],
            [Button.inline(translations.get("delete_module", "–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å üóëÔ∏è"), b'delete_module')],
            [Button.inline(translations.get("load_module", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å ‚¨ÜÔ∏è"), b'load_module')],
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await event.edit(translations.get("settings_message", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:"), buttons=settings_buttons)
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"
    if lang_code == "choose_language":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        current_lang = load_language()
        translations = load_translations(current_lang)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        language_buttons = [
            [Button.inline(translations.get("russian", "–†—É—Å—Å–∫–∏–π üá∑üá∫"), b'ru')],
            [Button.inline(translations.get("ukrainian", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶"), b'ua')],
            [Button.inline(translations.get("english", "English üá¨üáß"), b'en')],
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await event.edit(translations.get("choose_language_message", "Please choose a language:"), buttons=language_buttons)
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    save_language(lang_code)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Ñ–∞–π–ª
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞
    translations = load_translations(lang_code)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
    await event.edit(translations.get("language_changed", "‚úÖ Language changed!"))

    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í—Å–µ –º–æ–¥—É–ª–∏"
    if lang_code == "all_modules":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å –∏—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py
        modules = [f for f in os.listdir('modules') if f.endswith('.py') and f not in ['__init__.py', 'bot.py']]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .py
        buttons = [[Button.inline(module.replace('.py', ''), module.encode())] for module in modules]
        await event.edit(translations.get('all_modules_list', '–í—Å–µ –º–æ–¥—É–ª–∏:') + "\n", buttons=buttons)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.run_until_disconnected()
