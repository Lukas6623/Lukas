import json
import os
import asyncio
from telethon import TelegramClient, events
from telethon.tl.custom import Button

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
CONFIG_FILE = "config.json"
LANG_FILE = "modules/language.txt"
LANG_DIR = "languages"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —è–∑—ã–∫–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
MODULES_DIR = "modules"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –º–æ–¥—É–ª—è–º–∏
OWNER_JSON_FILE = "owner.json"  # –§–∞–π–ª —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –º–æ–¥—É–ª—è
waiting_for_module_file = False

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ —Ñ–∞–π–ª
def save_language(lang_code):
    with open(LANG_FILE, "w", encoding="utf-8") as file:
        file.write(lang_code)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
def load_language():
    if os.path.exists(LANG_FILE):
        with open(LANG_FILE, "r", encoding="utf-8") as file:
            lang = file.read().strip()
            return lang if os.path.exists(os.path.join(LANG_DIR, f"{lang}.py")) else "en"
    return "en"

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_translations(lang_code):
    lang_file = os.path.join(LANG_DIR, f"{lang_code}.py")
    if os.path.exists(lang_file):
        lang_module = {}
        with open(lang_file, "r", encoding="utf-8") as file:
            exec(file.read(), lang_module)
        return lang_module.get("LANG", {})
    return {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
def get_modules():
    modules = []
    for filename in os.listdir(MODULES_DIR):
        if filename.endswith(".py") and filename != "__init__.py":
            modules.append(filename[:-3])  # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .py
    return modules

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_forbidden_modules():
    if os.path.exists(OWNER_JSON_FILE):
        with open(OWNER_JSON_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            return data.get("forbidden_modules", [])
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å
def can_delete_module(module_name):
    if os.path.exists(OWNER_JSON_FILE):
        with open(OWNER_JSON_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            forbidden_modules = data.get("forbidden_modules", [])
            if module_name in forbidden_modules:
                return False  # –ú–æ–¥—É–ª—å –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å
    return True  # –ú–æ–¥—É–ª—å –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å

async def main():
    global waiting_for_module_file

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ api_id, api_hash, token –∏ owner_id
    API_ID = config.get("api_id")
    API_HASH = config.get("api_hash")
    API_TOKEN = config.get("token")
    OWNER_ID = config.get("user_id")

    if not API_ID or not API_HASH or not API_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç api_id, api_hash –∏–ª–∏ token –≤ config.json")
        return

    if not OWNER_ID:
        print("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id –≤ config.json")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –±–æ—Ç–∞
    bot = TelegramClient('bot', api_id=API_ID, api_hash=API_HASH)
    await bot.start(bot_token=API_TOKEN)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç OWNER_ID
    @bot.on(events.NewMessage(pattern='/start', from_users=OWNER_ID))
    async def start(event):
        current_lang = load_language()
        translations = load_translations(current_lang)
        buttons = [
            [Button.inline(translations.get("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"), b'settings')],
            [Button.inline(translations.get("choose_language", "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ üåç"), b'choose_language')],
        ]
        await event.reply(translations.get("choose_language_message", "üåç Choose a language:"), buttons=buttons)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ‚Äì —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è OWNER_ID
    @bot.on(events.CallbackQuery(func=lambda e: e.sender_id == OWNER_ID))
    async def callback(event):
        global waiting_for_module_file
        lang_code = event.data.decode()

        # –ü–æ–¥–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–∏–ª–∏ "back")
        if lang_code.lower() in ("back", "–Ω–∞–∑–∞–¥"):
            current_lang = load_language()
            translations = load_translations(current_lang)
            buttons = [
                [Button.inline(translations.get("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"), b'settings')],
                [Button.inline(translations.get("choose_language", "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ üåç"), b'choose_language')],
            ]
            await event.edit(translations.get("choose_language_message", "üåç Choose a language:"), buttons=buttons)
            return

        if lang_code == "settings":
            current_lang = load_language()
            translations = load_translations(current_lang)
            settings_buttons = [
                [Button.inline(translations.get("all_modules", "–í—Å–µ –º–æ–¥—É–ª–∏ üì¶"), b'all_modules')],
                [Button.inline(translations.get("delete_module", "–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å üóëÔ∏è"), b'delete_module')],
                [Button.inline(translations.get("load_module", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å ‚¨ÜÔ∏è"), b'load_module')],
                [Button.inline(translations.get("back", "Back"), b'back')],
            ]
            await event.edit(translations.get("settings_message", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:"), buttons=settings_buttons)
            return

        if lang_code == "choose_language":
            current_lang = load_language()
            translations = load_translations(current_lang)
            language_buttons = [
                [Button.inline(translations.get("russian", "–†—É—Å—Å–∫–∏–π üá∑üá∫"), b'ru')],
                [Button.inline(translations.get("ukrainian", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶"), b'ua')],
                [Button.inline(translations.get("english", "English üá¨üáß"), b'en')],
                [Button.inline(translations.get("settings", "–ù–∞–∑–∞–¥"), b'settings')],
                [Button.inline(translations.get("back", "Back"), b'back')],
            ]
            await event.edit(translations.get("choose_language_message", "Please choose a language:"), buttons=language_buttons)
            return

        if lang_code == "all_modules":
            modules = get_modules()
            current_lang = load_language()
            translations = load_translations(current_lang)
            module_buttons = [[Button.inline(module, module.encode())] for module in modules]
            module_buttons.append([Button.inline(translations.get("back", "Back"), b'settings')])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            await event.edit(translations.get("all_modules_message", "üì¶ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏: –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏, —Ñ—É–Ω–∫—Ü–∏–∏ —é–∑–µ—Ä –±–æ—Ç–∞ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å."), buttons=module_buttons)
            return

        if lang_code == "delete_module":
            modules = get_modules()
            forbidden_modules = load_forbidden_modules()
            modules_to_display = [module for module in modules if module not in forbidden_modules]
            current_lang = load_language()
            translations = load_translations(current_lang)
            if not modules_to_display:
                await event.edit(translations.get("no_modules_to_delete", "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."), buttons=[])
            else:
                module_buttons = [[Button.inline(module, module.encode())] for module in modules_to_display]
                module_buttons.append([Button.inline(translations.get("back", "Back"), b'settings')])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                await event.edit(translations.get("select_module_to_delete", "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –µ—Å–ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç–µ –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏, —Ñ—É–Ω–∫—Ü–∏–∏ —é–∑–µ—Ä –±–æ—Ç–∞ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å."), buttons=module_buttons)
            return

        if lang_code == "load_module":
            waiting_for_module_file = True
            current_lang = load_language()
            translations = load_translations(current_lang)
            await event.edit(translations.get("send_module_file", "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–∞–π–ª —Å –º–æ–¥—É–ª–µ–º (Python —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py)."))
            return

        # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∫–æ–¥, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—è, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
        if lang_code in get_modules():
            module_name = lang_code.strip()
            module_file = os.path.join(MODULES_DIR, f"{module_name}.py")
            print(f"–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å: {module_file}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            if can_delete_module(module_name):
                if os.path.exists(module_file):
                    try:
                        os.remove(module_file)
                        current_lang = load_language()
                        translations = load_translations(current_lang)
                        await event.edit(translations.get("module_deleted", f"‚úÖ –ú–æ–¥—É–ª—å {module_name} —É–¥–∞–ª–µ–Ω!"))
                        print(f"–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                    except Exception as e:
                        current_lang = load_language()
                        translations = load_translations(current_lang)
                        await event.edit(translations.get("module_not_found", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_name}: {str(e)}"))
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è {module_name}: {str(e)}")
                else:
                    current_lang = load_language()
                    translations = load_translations(current_lang)
                    await event.edit(translations.get("module_not_found", f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."))
                    print(f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {module_file}.")
            else:
                current_lang = load_language()
                translations = load_translations(current_lang)
                await event.edit(translations.get("module_cannot_delete", f"‚ùå –ú–æ–¥—É–ª—å {module_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."))
            return

        # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∫–æ–¥ —è–∑—ã–∫–∞ ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        save_language(lang_code)
        translations = load_translations(lang_code)
        await event.edit(translations.get("language_changed", "‚úÖ Language changed!"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –º–æ–¥—É–ª–µ–º
    @bot.on(events.NewMessage(from_users=OWNER_ID))
    async def handle_module_file(event):
        global waiting_for_module_file
        if waiting_for_module_file:
            if event.document:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                file = await event.download_media(MODULES_DIR)
                filename = os.path.basename(file)
                if filename.endswith(".py"):
                    waiting_for_module_file = False
                    current_lang = load_language()
                    translations = load_translations(current_lang)
                    await event.reply(translations.get("module_uploaded", f"‚úÖ –ú–æ–¥—É–ª—å {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!"))
                    print(f"–ú–æ–¥—É–ª—å {filename} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                else:
                    waiting_for_module_file = False
                    current_lang = load_language()
                    translations = load_translations(current_lang)
                    await event.reply(translations.get("invalid_file", "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py"))
            else:
                current_lang = load_language()
                translations = load_translations(current_lang)
                await event.reply(translations.get("no_file_sent", "‚ùå –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª."))
                waiting_for_module_file = False

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await bot.run_until_disconnected()

asyncio.run(main())
